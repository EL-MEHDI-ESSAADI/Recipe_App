
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');
/* ------------------- */
/* Custom properties   */
/* ------------------- */

/* ------------------- */
/* reset classes     */
/* ------------------- */

/* Box sizing */
*,
*::before,
*::after {
   box-sizing: border-box;
   margin: 0;
   padding: 0;
}
a {
   display: block;
   text-decoration: none;
}

ul {
   list-style: none;
}

button {
   cursor: pointer;
   border: 0;
   background-color: initial;
}



:not(img)::selection {
   background-color: #{'hsl(270deg 50% 40% / 83%)'} ;
   color:white;
}
img::selection {
   background-color: transparent;
}

/* set up the body */
body {
   // we choose the font family and size and bg and the color for the Body text because it will repeat a lot.
   font-family: 'Poppins', sans-serif; 
   background-image: linear-gradient(to right, #ffffff, #ece9e6);
   min-height: 100vh; 
   overflow-x: hidden;
   display: grid;
   place-items: center;
   position: relative;
   line-height: 1.4;
}

/* make images easier to work with */
img,
picutre {
   max-width: 100%;
   display: block;
}

/* make form elements easier to work with */
input,
button,
textarea,
select {
   font: inherit;
}

svg {
   display: block;
}

/* remove animations for people who've turned them off */
@media (prefers-reduced-motion: reduce) {
   *,
   *::before,
   *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
   }
}

// Utility classes are classes tha have just one simple job to set flex or size o color just one job
/* ------------------- */
/* Utility classes     */
/* ------------------- */

.flex {
   display: flex;
   gap: var(--flex-gap, 1rem); // now flex support gap
}

.grid {
   display: grid;
   gap: var(--grid-gap, 1rem);
}

.d-block {
   display: block;
}





// we will do a technique to add margin for chlids of a element
// we use where to give :not(:first-child) zero priority, so we select all child elements of flow element except the first
.flow > *:where(:not(:first-child)) {
   margin-top: var(--flow-space, 1rem);
}

// skip to content button

.skip-to-content {
   position: absolute;
   top: 0;
   left: 0;
   z-index: 9999;
   background: white;
   color: #{"hsl( var(--clr-dark) )"};
   padding: 0.5em 1em;
   transform: translateY(-100%);
   transition: transform 250ms ease-in;
   &:focus {
      transform: translateY(0);
   }
}


// svg

.github-corner {
   border-bottom: 0;
   position: fixed;
   right: 0;
   text-decoration: none;
   top: 0;
   z-index: 1;
   display: none;
   @media (min-width:35em) {
      display: block;
   }
}

.github-corner:hover .octo-arm {
   -webkit-animation: octocat-wave 560ms ease-in-out;
   animation: octocat-wave 560ms ease-in-out;
}
.github-corner svg {
   color: #fff;
   fill: black;
   height: 80px;
   width: 80px;
}

@keyframes octocat-wave {
   0%,
   100% {
      transform: rotate(0);
   }
   20%,
   60% {
      transform: rotate(-25deg);
   }
   40%,
   80% {
      transform: rotate(10deg);
   }
}

.CreaterLogo {
   position: absolute;
   bottom: 15px;
   right: 15px;
   width: 70px;
   z-index: 10000;
}


.preloader {
   inset: 0;
   position: fixed;
   background: transparent;
   z-index: 1000;
   background: url(../assets/preloader.svg) no-repeat center #0000006b;
}


